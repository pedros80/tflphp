<?php

declare(strict_types=1);

namespace Pedros80\Build\Actions\Traits;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\EnumType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PhpNamespace;

use function Safe\preg_replace;

trait GeneratesFile
{
    private function generate(ClassType | EnumType $code, PhpNamespace $namespace, array $useClasses=[]): PhpFile
    {
        $file = new PhpFile();
        $file->setStrictTypes();
        $this->addFileComment($file, get_class($code));

        $namespace->add($code);

        foreach ($useClasses as $use) {
            $namespace->addUse($use);
        }

        $file->addNamespace($namespace);

        return $file;
    }

    public function writeEnum(EnumType $enum): bool
    {
        return $this->fileWriter->write(
            "Enums/{$enum->getName()}.php",
            $this->generate(
                $enum,
                new PhpNamespace('Pedros80\TfLphp\Enums')
            )
        );
    }

    public function writeParam(string $name, ClassType $class, array $useClasses=[]): bool
    {
        return $this->fileWriter->write(
            "Params/{$name}.php",
            $this->generate(
                $class,
                new PhpNamespace('Pedros80\TfLphp\Params'),
                $useClasses
            )
        );
    }

    protected function addFileComment(PhpFile $file, string $type): void
    {
        $type = match ($type) {
            EnumType::class => 'enum',
            default         => 'class',
        };

        $file->addComment("This {$type} was autogenerated");
        $file->addComment('Do NOT edit');
    }

    protected function generateEnum(string $name, array $values, bool $valuesIncludeBacking=false): EnumType
    {
        $cases = $valuesIncludeBacking ? $values : $this->getBackedCases($values);
        $enum  = new EnumType($name);
        foreach ($cases as $case => $value) {
            $enum->addCase($case, $value);
        }

        return $enum;
    }

    protected function getConstFromString(string $value): string
    {
        $no_ands     = str_replace('&', 'AND', $value);
        $no_spaces   = str_replace([' ', '(', ')', "'"], '', $no_ands);
        $uncamel     = preg_replace('/[A-Z]/', '-' . '$0', lcfirst($no_spaces));
        $upper       = strtoupper($uncamel);
        $underscored = str_replace(['-', '__'], '_', $upper);

        return $underscored;
    }

    private function getBackedCases(array $values): array
    {
        return array_reduce(
            $values,
            function (array $cases, string $value) {
                $cases[$this->getConstFromString($value)] = $value;

                return $cases;
            },
            []
        );
    }
}
